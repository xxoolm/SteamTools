#nullable enable
#pragma warning disable IDE0079 // 请删除不必要的忽略
#pragma warning disable SA1634 // File header should show copyright
#pragma warning disable CS8601 // 引用类型赋值可能为 null。
#pragma warning disable CS0108 // 成员隐藏继承的成员；缺少关键字 new
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由包 BD.Common.Settings.V4.SourceGenerator.Tools 源生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using static BD.WTTS.Settings.Abstractions.IGeneralSettings;

// ReSharper disable once CheckNamespace
namespace BD.WTTS.Settings;

[JsonSourceGenerationOptions(WriteIndented = true, IgnoreReadOnlyProperties = true)]
[JsonSerializable(typeof(GeneralSettings_))]
internal partial class GeneralSettingsContext : JsonSerializerContext
{
    static GeneralSettingsContext? instance;

    public static GeneralSettingsContext Instance
        => instance ??= new GeneralSettingsContext(ISettings.GetDefaultOptions());
}

[MPObj, MP2Obj(SerializeLayout.Explicit)]
public sealed partial class GeneralSettings_ : IGeneralSettings, ISettings, ISettings<GeneralSettings_>
{
    public const string Name = nameof(GeneralSettings);

    static string ISettings.Name => Name;

    static JsonSerializerContext ISettings.JsonSerializerContext
        => GeneralSettingsContext.Instance;

    static JsonTypeInfo ISettings.JsonTypeInfo
        => GeneralSettingsContext.Instance.GeneralSettings_;

    static JsonTypeInfo<GeneralSettings_> ISettings<GeneralSettings_>.JsonTypeInfo
        => GeneralSettingsContext.Instance.GeneralSettings_;

    /// <summary>
    /// 自动检查应用更新
    /// </summary>
    [MPKey(0), MP2Key(0), JsonPropertyOrder(0)]
    public bool AutoCheckAppUpdate { get; set; } = IGeneralSettings.DefaultAutoCheckAppUpdate;

    /// <summary>
    /// 选择下载更新渠道
    /// </summary>
    [MPKey(1), MP2Key(1), JsonPropertyOrder(1)]
    public UpdateChannelType UpdateChannel { get; set; } = IGeneralSettings.DefaultUpdateChannel;

    /// <summary>
    /// 开机自启动
    /// </summary>
    [MPKey(2), MP2Key(2), JsonPropertyOrder(2)]
    public bool AutoRunOnStartup { get; set; } = IGeneralSettings.DefaultAutoRunOnStartup;

    /// <summary>
    /// 启动时最小化
    /// </summary>
    [MPKey(3), MP2Key(3), JsonPropertyOrder(3)]
    public bool MinimizeOnStartup { get; set; } = IGeneralSettings.DefaultMinimizeOnStartup;

    /// <summary>
    /// 启用托盘图标
    /// </summary>
    [MPKey(4), MP2Key(4), JsonPropertyOrder(4)]
    public bool TrayIcon { get; set; } = IGeneralSettings.DefaultTrayIcon;

    /// <summary>
    /// 启用消息推送通知
    /// </summary>
    [MPKey(5), MP2Key(5), JsonPropertyOrder(5)]
    public bool MessagePopupNotification { get; set; } = IGeneralSettings.DefaultMessagePopupNotification;

    /// <summary>
    /// 游戏列表使用本地缓存
    /// </summary>
    [MPKey(6), MP2Key(6), JsonPropertyOrder(6)]
    public bool GameListUseLocalCache { get; set; } = IGeneralSettings.DefaultGameListUseLocalCache;

    /// <summary>
    /// 文本阅读器提供商，值为程序路径
    /// </summary>
    [MPKey(7), MP2Key(7), JsonPropertyOrder(7)]
    public Dictionary<Platform, string>? TextReaderProvider { get; set; } = IGeneralSettings.DefaultTextReaderProvider;

    /// <summary>
    /// Hosts 文件编码类型
    /// </summary>
    [MPKey(8), MP2Key(8), JsonPropertyOrder(8)]
    public EncodingType HostsFileEncodingType { get; set; } = IGeneralSettings.DefaultHostsFileEncodingType;

    /// <summary>
    /// 是否使用硬件加速
    /// </summary>
    [MPKey(9), MP2Key(9), JsonPropertyOrder(9)]
    public bool GPU { get; set; } = IGeneralSettings.DefaultGPU;

    /// <summary>
    /// 使用本机 OpenGL
    /// </summary>
    [MPKey(10), MP2Key(10), JsonPropertyOrder(10)]
    public bool NativeOpenGL { get; set; } = IGeneralSettings.DefaultNativeOpenGL;

    /// <summary>
    /// 屏幕捕获/允许截图，在一些含有机密的页面上是否允许截图，默认为 <see langword="false"/>
    /// </summary>
    [MPKey(11), MP2Key(11), JsonPropertyOrder(11)]
    public bool ScreenCapture { get; set; } = IGeneralSettings.DefaultScreenCapture;

    /// <summary>
    /// 禁用插件
    /// </summary>
    [MPKey(12), MP2Key(12), JsonPropertyOrder(12)]
    public HashSet<string>? DisablePlugins { get; set; } = IGeneralSettings.DefaultDisablePlugins;

    /// <summary>
    /// 插件安全模式
    /// </summary>
    [MPKey(13), MP2Key(13), JsonPropertyOrder(13)]
    public bool PluginSafeMode { get; set; } = IGeneralSettings.DefaultPluginSafeMode;

    /// <summary>
    /// 最后查看通知时间
    /// </summary>
    [MPKey(14), MP2Key(14), JsonPropertyOrder(14)]
    public DateTimeOffset LastLookNoticeDateTime { get; set; } = IGeneralSettings.DefaultLastLookNoticeDateTime;

    #region 配置应用程序的 Web 代理

    /// <summary>
    /// Web 代理模式
    /// </summary>
    [MPKey(15), MP2Key(15), JsonPropertyOrder(15)]
    public AppWebProxyMode WebProxyMode { get; set; } = IGeneralSettings.DefaultWebProxyMode;

    /// <summary>
    /// Web 自定义代理 Host
    /// </summary>
    [MPKey(16), MP2Key(16), JsonPropertyOrder(16)]
    public string? CustomWebProxyModeHost { get; set; } = IGeneralSettings.DefaultCustomWebProxyModeHost;

    /// <summary>
    /// Web 自定义代理 Port
    /// </summary>
    [MPKey(17), MP2Key(17), JsonPropertyOrder(17)]
    public int CustomWebProxyModePort { get; set; } = IGeneralSettings.DefaultCustomWebProxyModePort;

    /// <summary>
    /// Web 自定义代理 Address
    /// </summary>
    [MPKey(18), MP2Key(18), JsonPropertyOrder(18)]
    public string? CustomWebProxyModeAddress { get; set; } = IGeneralSettings.DefaultCustomWebProxyModeAddress;

    /// <summary>
    /// Web 自定义代理 BypassOnLocal
    /// </summary>
    [MPKey(19), MP2Key(19), JsonPropertyOrder(19)]
    public bool CustomWebProxyModeBypassOnLocal { get; set; } = IGeneralSettings.DefaultCustomWebProxyModeBypassOnLocal;

    /// <summary>
    /// Web 自定义代理 NetworkCredential.UserName
    /// </summary>
    [MPKey(20), MP2Key(20), JsonPropertyOrder(20)]
    public string? CustomWebProxyModeCredentialUserName { get; set; } = IGeneralSettings.DefaultCustomWebProxyModeCredentialUserName;

    /// <summary>
    /// Web 自定义代理 NetworkCredential.Password
    /// </summary>
    [MPKey(21), MP2Key(21), JsonPropertyOrder(21)]
    public string? CustomWebProxyModeCredentialPassword { get; set; } = IGeneralSettings.DefaultCustomWebProxyModeCredentialPassword;

    /// <summary>
    /// Web 自定义代理 NetworkCredential.Domain
    /// </summary>
    [MPKey(22), MP2Key(22), JsonPropertyOrder(22)]
    public string? CustomWebProxyModeCredentialDomain { get; set; } = IGeneralSettings.DefaultCustomWebProxyModeCredentialDomain;

    #endregion

}

public static partial class GeneralSettings
{
    /// <summary>
    /// 自动检查应用更新
    /// </summary>
    public static SettingsStructProperty<bool, GeneralSettings_> AutoCheckAppUpdate { get; }
        = new(DefaultAutoCheckAppUpdate);

    /// <summary>
    /// 选择下载更新渠道
    /// </summary>
    public static SettingsStructProperty<UpdateChannelType, GeneralSettings_> UpdateChannel { get; }
        = new(DefaultUpdateChannel);

    /// <summary>
    /// 开机自启动
    /// </summary>
    public static SettingsStructProperty<bool, GeneralSettings_> AutoRunOnStartup { get; }
        = new(DefaultAutoRunOnStartup);

    /// <summary>
    /// 启动时最小化
    /// </summary>
    public static SettingsStructProperty<bool, GeneralSettings_> MinimizeOnStartup { get; }
        = new(DefaultMinimizeOnStartup);

    /// <summary>
    /// 启用托盘图标
    /// </summary>
    public static SettingsStructProperty<bool, GeneralSettings_> TrayIcon { get; }
        = new(DefaultTrayIcon);

    /// <summary>
    /// 启用消息推送通知
    /// </summary>
    public static SettingsStructProperty<bool, GeneralSettings_> MessagePopupNotification { get; }
        = new(DefaultMessagePopupNotification);

    /// <summary>
    /// 游戏列表使用本地缓存
    /// </summary>
    public static SettingsStructProperty<bool, GeneralSettings_> GameListUseLocalCache { get; }
        = new(DefaultGameListUseLocalCache);

    /// <summary>
    /// 文本阅读器提供商，值为程序路径
    /// </summary>
    public static SettingsProperty<Platform, string, Dictionary<Platform, string>, GeneralSettings_> TextReaderProvider { get; }
        = new(DefaultTextReaderProvider);

    /// <summary>
    /// Hosts 文件编码类型
    /// </summary>
    public static SettingsStructProperty<EncodingType, GeneralSettings_> HostsFileEncodingType { get; }
        = new(DefaultHostsFileEncodingType);

    /// <summary>
    /// 是否使用硬件加速
    /// </summary>
    public static SettingsStructProperty<bool, GeneralSettings_> GPU { get; }
        = new(DefaultGPU);

    /// <summary>
    /// 使用本机 OpenGL
    /// </summary>
    public static SettingsStructProperty<bool, GeneralSettings_> NativeOpenGL { get; }
        = new(DefaultNativeOpenGL);

    /// <summary>
    /// 屏幕捕获/允许截图，在一些含有机密的页面上是否允许截图，默认为 <see langword="false"/>
    /// </summary>
    public static SettingsStructProperty<bool, GeneralSettings_> ScreenCapture { get; }
        = new(DefaultScreenCapture);

    /// <summary>
    /// 禁用插件
    /// </summary>
    public static SettingsProperty<string, HashSet<string>, GeneralSettings_> DisablePlugins { get; }
        = new(DefaultDisablePlugins);

    /// <summary>
    /// 插件安全模式
    /// </summary>
    public static SettingsStructProperty<bool, GeneralSettings_> PluginSafeMode { get; }
        = new(DefaultPluginSafeMode);

    /// <summary>
    /// 最后查看通知时间
    /// </summary>
    public static SettingsStructProperty<DateTimeOffset, GeneralSettings_> LastLookNoticeDateTime { get; }
        = new(DefaultLastLookNoticeDateTime);

    #region 配置应用程序的 Web 代理

    /// <summary>
    /// Web 代理模式
    /// </summary>
    public static SettingsStructProperty<AppWebProxyMode, GeneralSettings_> WebProxyMode { get; }
        = new(DefaultWebProxyMode);

    /// <summary>
    /// Web 自定义代理 Host
    /// </summary>
    public static SettingsProperty<string, GeneralSettings_> CustomWebProxyModeHost { get; }
        = new(DefaultCustomWebProxyModeHost);

    /// <summary>
    /// Web 自定义代理 Port
    /// </summary>
    public static SettingsStructProperty<int, GeneralSettings_> CustomWebProxyModePort { get; }
        = new(DefaultCustomWebProxyModePort);

    /// <summary>
    /// Web 自定义代理 Address
    /// </summary>
    public static SettingsProperty<string, GeneralSettings_> CustomWebProxyModeAddress { get; }
        = new(DefaultCustomWebProxyModeAddress);

    /// <summary>
    /// Web 自定义代理 BypassOnLocal
    /// </summary>
    public static SettingsStructProperty<bool, GeneralSettings_> CustomWebProxyModeBypassOnLocal { get; }
        = new(DefaultCustomWebProxyModeBypassOnLocal);

    /// <summary>
    /// Web 自定义代理 NetworkCredential.UserName
    /// </summary>
    public static SettingsProperty<string, GeneralSettings_> CustomWebProxyModeCredentialUserName { get; }
        = new(DefaultCustomWebProxyModeCredentialUserName);

    /// <summary>
    /// Web 自定义代理 NetworkCredential.Password
    /// </summary>
    public static SettingsProperty<string, GeneralSettings_> CustomWebProxyModeCredentialPassword { get; }
        = new(DefaultCustomWebProxyModeCredentialPassword);

    /// <summary>
    /// Web 自定义代理 NetworkCredential.Domain
    /// </summary>
    public static SettingsProperty<string, GeneralSettings_> CustomWebProxyModeCredentialDomain { get; }
        = new(DefaultCustomWebProxyModeCredentialDomain);

    #endregion

}
