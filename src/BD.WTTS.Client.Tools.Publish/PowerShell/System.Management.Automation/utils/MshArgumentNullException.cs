// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// https://github.com/PowerShell/PowerShell/blob/v7.2.4/src/System.Management.Automation/utils/MshArgumentNullException.cs

using System.Runtime.Serialization;

namespace System.Management.Automation
{
    /// <summary>
    /// This is a wrapper for exception class
    /// <see cref="System.ArgumentNullException"/>
    /// which provides additional information via
    /// <see cref="System.Management.Automation.IContainsErrorRecord"/>.
    /// </summary>
    /// <remarks>
    /// Instances of this exception class are usually generated by the
    /// Monad Engine.  It is unusual for code outside the Monad Engine
    /// to create an instance of this class.
    /// </remarks>
    [Serializable]
    public class PSArgumentNullException
            : ArgumentNullException/*, IContainsErrorRecord*/
    {
        #region ctor

        /// <summary>
        /// Initializes a new instance of the PSArgumentNullException class.
        /// </summary>
        /// <returns>Constructed object.</returns>
#pragma warning disable CS8618 // 在退出构造函数时，不可为 null 的字段必须包含非 null 值。请考虑声明为可以为 null。
        public PSArgumentNullException()
#pragma warning restore CS8618 // 在退出构造函数时，不可为 null 的字段必须包含非 null 值。请考虑声明为可以为 null。
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PSArgumentNullException class.
        /// </summary>
        /// <param name="paramName"></param>
        /// <returns>Constructed object.</returns>
        /// <remarks>
        /// Per MSDN, the parameter is paramName and not message.
        /// I confirm this experimentally as well.
        /// </remarks>
#pragma warning disable CS8618 // 在退出构造函数时，不可为 null 的字段必须包含非 null 值。请考虑声明为可以为 null。
        public PSArgumentNullException(string paramName)
#pragma warning restore CS8618 // 在退出构造函数时，不可为 null 的字段必须包含非 null 值。请考虑声明为可以为 null。
            : base(paramName)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PSArgumentNullException class.
        /// </summary>
        /// <param name="message"></param>
        /// <param name="innerException"></param>
        /// <returns>Constructed object.</returns>
        public PSArgumentNullException(string message, Exception innerException)
            : base(message, innerException)
        {
            _message = message;
        }

        /// <summary>
        /// Initializes a new instance of the PSArgumentNullException class.
        /// </summary>
        /// <param name="paramName"></param>
        /// <param name="message"></param>
        /// <returns>Constructed object.</returns>
        /// <remarks>
        /// ArgumentNullException has this ctor form and we imitate it here.
        /// </remarks>
        public PSArgumentNullException(string paramName, string message)
            : base(paramName, message)
        {
            _message = message;
        }

        #region Serialization

        /// <summary>
        /// Initializes a new instance of the PSArgumentNullException class
        /// using data serialized via
        /// <see cref="System.Runtime.Serialization.ISerializable"/>
        /// </summary>
        /// <param name="info">Serialization information.</param>
        /// <param name="context">Streaming context.</param>
        /// <returns>Constructed object.</returns>
#pragma warning disable CS8618 // 在退出构造函数时，不可为 null 的字段必须包含非 null 值。请考虑声明为可以为 null。
        protected PSArgumentNullException(SerializationInfo info,
#pragma warning restore CS8618 // 在退出构造函数时，不可为 null 的字段必须包含非 null 值。请考虑声明为可以为 null。
                           StreamingContext context)
                : base(info, context)
        {
            _errorId = info.GetString("ErrorId");
            _message = info.GetString("PSArgumentNullException_MessageOverride");
        }

        /// <summary>
        /// Serializer for <see cref="System.Runtime.Serialization.ISerializable"/>
        /// </summary>
        /// <param name="info">Serialization information.</param>
        /// <param name="context">Streaming context.</param>
        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            if (info == null)
            {
                throw new PSArgumentNullException(nameof(info));
            }

            base.GetObjectData(info, context);
            info.AddValue("ErrorId", _errorId);
            info.AddValue("PSArgumentNullException_MessageOverride", _message);
        }
        #endregion Serialization
        #endregion ctor

        ///// <summary>
        ///// Additional information about the error.
        ///// </summary>
        ///// <value></value>
        ///// <remarks>
        ///// Note that ErrorRecord.Exception is
        ///// <see cref="System.Management.Automation.ParentContainsErrorRecordException"/>.
        ///// </remarks>
        //public ErrorRecord ErrorRecord
        //{
        //    get
        //    {
        //        if (_errorRecord == null)
        //        {
        //            _errorRecord = new ErrorRecord(
        //                new ParentContainsErrorRecordException(this),
        //                _errorId,
        //                ErrorCategory.InvalidArgument,
        //                null);
        //        }

        //        return _errorRecord;
        //    }
        //}

        //private ErrorRecord _errorRecord;
        private readonly string _errorId = "ArgumentNull";

        /// <summary>
        /// See <see cref="System.Exception.Message"/>
        /// </summary>
        /// <remarks>
        /// Exception.Message is get-only, but you can effectively
        /// set it in a subclass by overriding this virtual property.
        /// </remarks>
        /// <value></value>
        public override string Message
        {
            get { return string.IsNullOrEmpty(_message) ? base.Message : _message; }
        }

        private readonly string _message;
    }
}