#nullable enable
#pragma warning disable IDE0079 // 请删除不必要的忽略
#pragma warning disable SA1634 // File header should show copyright
#pragma warning disable CS8601 // 引用类型赋值可能为 null。
#pragma warning disable CS0108 // 成员隐藏继承的成员；缺少关键字 new
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由包 BD.Common.Settings.V4.SourceGenerator.Tools 源生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using static BD.WTTS.Settings.Abstractions.ISteamIdleSettings;

// ReSharper disable once CheckNamespace
namespace BD.WTTS.Settings;

[JsonSourceGenerationOptions(WriteIndented = true, IgnoreReadOnlyProperties = true)]
[JsonSerializable(typeof(SteamIdleSettings_))]
internal partial class SteamIdleSettingsContext : JsonSerializerContext
{
    static SteamIdleSettingsContext? instance;

    public static SteamIdleSettingsContext Instance
        => instance ??= new SteamIdleSettingsContext(ISettings.GetDefaultOptions());
}

[MPObj, MP2Obj(SerializeLayout.Explicit)]
public sealed partial class SteamIdleSettings_ : ISteamIdleSettings, ISettings, ISettings<SteamIdleSettings_>
{
    public const string Name = nameof(SteamIdleSettings);

    static string ISettings.Name => Name;

    static JsonSerializerContext ISettings.JsonSerializerContext
        => SteamIdleSettingsContext.Instance;

    static JsonTypeInfo ISettings.JsonTypeInfo
        => SteamIdleSettingsContext.Instance.SteamIdleSettings_;

    static JsonTypeInfo<SteamIdleSettings_> ISettings<SteamIdleSettings_>.JsonTypeInfo
        => SteamIdleSettingsContext.Instance.SteamIdleSettings_;

    /// <summary>
    /// 挂卡状态更新时间
    /// </summary>
    [MPKey(0), MP2Key(0), JsonPropertyOrder(0)]
    public TimeSpan IdleTime { get; set; } = ISteamIdleSettings.DefaultIdleTime;

    /// <summary>
    /// 运行规则
    /// </summary>
    [MPKey(1), MP2Key(1), JsonPropertyOrder(1)]
    public IdleRule IdleRule { get; set; } = ISteamIdleSettings.DefaultIdleRule;

    /// <summary>
    /// 运行顺序
    /// </summary>
    [MPKey(2), MP2Key(2), JsonPropertyOrder(2)]
    public IdleSequentital IdleSequentital { get; set; } = ISteamIdleSettings.DefaultIdleSequentital;

    /// <summary>
    /// 最大并行运行游戏数量
    /// </summary>
    [MPKey(3), MP2Key(3), JsonPropertyOrder(3)]
    public int MaxIdleCount { get; set; } = ISteamIdleSettings.DefaultMaxIdleCount;

    /// <summary>
    /// 最少游戏时间 hours
    /// </summary>
    [MPKey(4), MP2Key(4), JsonPropertyOrder(4)]
    public double MinRunTime { get; set; } = ISteamIdleSettings.DefaultMinRunTime;

    /// <summary>
    /// 自动切换游戏时间间隔 ms
    /// </summary>
    [MPKey(5), MP2Key(5), JsonPropertyOrder(5)]
    public double SwitchTime { get; set; } = ISteamIdleSettings.DefaultSwitchTime;

    /// <summary>
    /// 自动刷新徽章数据时间间隔 min
    /// </summary>
    [MPKey(6), MP2Key(6), JsonPropertyOrder(6)]
    public double RefreshBadgesTime { get; set; } = ISteamIdleSettings.DefaultRefreshBadgesTime;

}

public static partial class SteamIdleSettings
{
    /// <summary>
    /// 挂卡状态更新时间
    /// </summary>
    public static SettingsStructProperty<TimeSpan, SteamIdleSettings_> IdleTime { get; }
        = new(DefaultIdleTime);

    /// <summary>
    /// 运行规则
    /// </summary>
    public static SettingsStructProperty<IdleRule, SteamIdleSettings_> IdleRule { get; }
        = new(DefaultIdleRule);

    /// <summary>
    /// 运行顺序
    /// </summary>
    public static SettingsStructProperty<IdleSequentital, SteamIdleSettings_> IdleSequentital { get; }
        = new(DefaultIdleSequentital);

    /// <summary>
    /// 最大并行运行游戏数量
    /// </summary>
    public static SettingsStructProperty<int, SteamIdleSettings_> MaxIdleCount { get; }
        = new(DefaultMaxIdleCount);

    /// <summary>
    /// 最少游戏时间 hours
    /// </summary>
    public static SettingsStructProperty<double, SteamIdleSettings_> MinRunTime { get; }
        = new(DefaultMinRunTime);

    /// <summary>
    /// 自动切换游戏时间间隔 ms
    /// </summary>
    public static SettingsStructProperty<double, SteamIdleSettings_> SwitchTime { get; }
        = new(DefaultSwitchTime);

    /// <summary>
    /// 自动刷新徽章数据时间间隔 min
    /// </summary>
    public static SettingsStructProperty<double, SteamIdleSettings_> RefreshBadgesTime { get; }
        = new(DefaultRefreshBadgesTime);

}
